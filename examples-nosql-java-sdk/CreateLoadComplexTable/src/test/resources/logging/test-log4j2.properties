# Configures the Log4j2 logging handlers for the JUnit tests for
# the CreateLoadComplexTable example. The only entities referenced
# by that example that uses Log4j2 are classes from the third party
# libraries from OCI (e.g. com.oracle.bmc.ConfigFileReader) and
# netty (which is used by the NoSql Driver SDK).
#
# Only the OCI and netty third party libraries use Log4j2 (via slf4j).
# The CreateLoadComplexTable example, as well as the JUnit test
# framework used to test that example, use java.util.logging.
#
# To use a Log4j2 configuration different than this configuration,
# set the following system property on the JVM in which the tests run:
#
# -Dlog4j.configurationFile=file:<path-to-your-config-properties-file>
#
# Also, note that the log4j2 logging infrastructure can be debugged by
# specifying the system property:
#
# -Dlog4j2.debug
#
# The Log4j2 levels are:
#
# FATAL
# ERROR
# WARN
# INFO
# DEBUG
# TRACE
#
# FORMAT specifications for the log record format:
#
# %d is ISO8601 ex. 2021-06-23 15:25:17,862
# %d{yyyy-MM-dd HH:mm:ss} - no milliseconds ex. 2021-06-23 15:25:17
# [$t] - displays the thread name ex. [main]
# %-7p - displays the priority of the logging event with 7-char left alignment
#        ex. INFO    , DEBUG   , WARN    , etc. 7-char alignment is used
#        so that all priorities will align with the longest possible
#        priority, which is the WARNING level produced by the java.util.logging
#        based loggers that may be used along with this log4j logger.
# %c   - displays the class name of the caller that issued the logging event 
#        ex. com.oracle.nosql.tools.analytics.CloudTableUploader
# %x   - displays the 'nested diagnostic context' associated with the
#        thread that generated the logging event (probably not applicable here)
# %m   - displays the desired message
# %n   - displays the platform dependent line separator (ex. CR/LF or LF)
#
# Some examples of different formats are:
#
# appender.console.layout.pattern = %d [%t] %-5p %c %x - %m%n
# appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c %x - %m%n
# appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-7p [%c]: %m%n
# ############################################################################

status = ERROR

# The name of this Log4j2 Logger configuration
name = complextable-test-log4j2-config

property.root.log.level = ERROR
property.com.oracle.bmc.Service.dir=./log
property.com.oracle.bmc.Service.log.file=complextable-test.log

# NOTE: the output file complextable-test.log will be located under
#       the directory 'complextable/target/test-run/log'.

appenders = console, file

appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-7p [%c]: %m%n

appender.file.type = File
appender.file.name = LOGFILE
appender.file.fileName = ${com.oracle.bmc.Service.dir}/${com.oracle.bmc.Service.log.file}
appender.file.layout.type = PatternLayout
appender.file.layout.pattern = %d{yyyy-MM-dd HH:mm:ss} %-7p [%c]: %m%n

# Root logger.

rootLogger.level = ${sys:root.log.level}
rootLogger.appenderRefs = stdout, file
rootLogger.appenderRef.stdout.ref = STDOUT
rootLogger.appenderRef.file.ref = LOGFILE

# Logger IDENTIFIERS (each identifier corresponds to a logger name)

loggers = ConfigFileReader, AbstractByteBuf, ByteBufUtil, PooledByteBufAllocator, PoolThreadCache, DefaultChannelId, MultithreadEventLoopGroup, NioEventLoop, NetUtil, NetUtilInitializations, Recycler, ResourceLeakDetector, ResourceLeakDetectorFactory, InternalLoggerFactory, PlatformDependent0, PlatformDependent, CleanerJava9, InternalThreadLocalMap

# Logger NAMES (used when setting logger levels)

# Logger names for the OCI bmc classes

logger.ConfigFileReader.name = com.oracle.bmc.ConfigFileReader

# Logger names for the netty classes

logger.AbstractByteBuf.name = io.netty.buffer.AbstractByteBuf
logger.ByteBufUtil.name = io.netty.buffer.ByteBufUtil
logger.PooledByteBufAllocator.name = io.netty.buffer.PooledByteBufAllocator
logger.PoolThreadCache.name = io.netty.buffer.PoolThreadCache
logger.DefaultChannelId.name = io.netty.channel.DefaultChannelId
logger.MultithreadEventLoopGroup.name = io.netty.channel.MultithreadEventLoopGroup
logger.NioEventLoop.name = io.netty.channel.nio.NioEventLoop
logger.NetUtil.name = io.netty.util.NetUtil
logger.NetUtilInitializations.name = io.netty.util.NetUtilInitializations
logger.Recycler.name = io.netty.util.Recycler
logger.ResourceLeakDetector.name = io.netty.util.ResourceLeakDetector
logger.ResourceLeakDetectorFactory.name = io.netty.util.ResourceLeakDetectorFactory
logger.InternalLoggerFactory.name = io.netty.util.internal.logging.InternalLoggerFactory
logger.PlatformDependent0.name = io.netty.util.internal.PlatformDependent0
logger.PlatformDependent.name = io.netty.util.internal.PlatformDependent
logger.CleanerJava9.name = io.netty.util.internal.CleanerJava9
logger.InternalThreadLocalMap.name = io.netty.util.internal.InternalThreadLocalMap

# Levels for the loggers defined by the OCI bmc classes named above

logger.ConfigFileReader.level = WARN

# Levels for the loggers defined by the netty classes named above

logger.AbstractByteBuf.level = WARN
logger.ByteBufUtil.level = WARN
logger.PooledByteBufAllocator.level = WARN
logger.PoolThreadCache.level = WARN
logger.DefaultChannelId.level = WARN
logger.MultithreadEventLoopGroup.level = WARN
logger.NioEventLoop.level = WARN
logger.NetUtil.level = WARN
logger.NetUtilInitializations.level = WARN
logger.Recycler.level = WARN
logger.ResourceLeakDetector.level = WARN
logger.ResourceLeakDetectorFactory.level = WARN
logger.InternalLoggerFactory.level = WARN
logger.PlatformDependent0.level = WARN
logger.PlatformDependent.level = WARN
logger.CleanerJava9.level = WARN
logger.InternalThreadLocalMap.level = WARN




