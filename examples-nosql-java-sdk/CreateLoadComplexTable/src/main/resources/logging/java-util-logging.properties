# OFF
# SEVERE
# WARNING
# INFO
# FINE
# FINEST
# ALL

.level=INFO

handlers=java.util.logging.ConsoleHandler

java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter

# FORMAT specifications for the log record format:
#
# %1$tF   - displays the date in yyyy-MM-dd format, ex. 2021-06-23
# %1$tT   - displays the time in HH:mm:ss format, ex. 16:06:14 
# %4$-7s  - displays the priority of the logging event with 7-char left
#           alignment, ex. WARNING, INFO   , FINE   , FINEST , etc.
#           7-char alignment is used so that all priorities will align
#           with the longest possible priority, which the WARNING level.
# [%2$s]: - displays the class name and method of the caller that issued
#           the logging event 
#           ex. [com.oracle.nosql.tools.migrator.util.LoggerUtil log]:
# %5$s    - displays the string message to be logged
# %6$s    - displays the throwable and its stacktrace, if any
# 
# Use this format when running from an OCI function. This format reduces
# the length of the log record so that the interesting information that
# is logged appears in the visible portion of the OCI logging console,
# and thus does not require scrolling.

#java.util.logging.SimpleFormatter.format=%5$s%n

# Use this format to also include the originating class and method names
# as well as (optionally) any throwables and stacktraces
#java.util.logging.SimpleFormatter.format=%1$tF %1$tT %4$-7s [%2$s]: %5$s%n
#java.util.logging.SimpleFormatter.format=%1$tF %1$tT %4$-7s [%2$s]: %5$s%6$s%n

# Use this format to exclude the originating class and method name.
java.util.logging.SimpleFormatter.format=%1$tF %1$tT %4$-7s %5$s%n

# LEVELS for each java.util.logging.logger that is used:

oracle.nosql.driver.level=WARNING
nosql.cloud.table.config.Config.level=INFO
nosql.cloud.table.CreateLoadComplexTable.level=INFO
